[{"content":"Partie 5 Au deuxi√®me jour de mon apprentissage je me suis concentr√© sur uniquement la partie 5 du tutoriel Django, pour cause ! Elle parle des Tests et observe donc un volume important.\nVoil√† ce que j\u0026rsquo;en retiens g√©n√©ralement :\nIl faut √©crire des tests, peut importe la quantit√© (mieux vaut trop que pas assez) Les d√©butants ne fonctionnent pas en TDD, mais il faut √©crire des tests quand m√™me Les tests c\u0026rsquo;est super pratique quand on est en √©quipe (pour ne pas casser le code du coll√®gue et vice-versa) Et d\u0026rsquo;un point de vue plus \u0026ldquo;tech\u0026rdquo; :\non utilise beaucoup la fonction from django.utils import timezone on √©crit une classe par Vue / Model au moins Il faut privil√©gier l\u0026rsquo;usage de self.Assert\u0026lt;something\u0026gt; plut√¥t que assert Il est possible de tester les vues dans le shell on importe l\u0026rsquo;environement from django.setup.utils import setup_test_environment on l\u0026rsquo;applique setup_test_environment() on peut ensuite faire des choses comme r = client.get(reverse('polls:index')) Partie 6 J\u0026rsquo;ai commenc√© la partie 6 du tutoriel sans succ√®s, celle-ci traite des STATIC_FILES. Rendez-vous donc au prochain article pour la solution. üòâ\nSvelte Bon alors c\u0026rsquo;est quoi ? Svelte est un framework Javascript (comme React, Angular et Vue).\nAlors pourquoi je m\u0026rsquo;int√©resse √† lui et pas aux mastodonte du secteur ?\nD\u0026rsquo;abord parceque pas besoin d\u0026rsquo;apprendre le Typescript, on utilise les langages qu\u0026rsquo;on conna√Æt (HTML, CSS, JS). Ensuite il n\u0026rsquo;utilise pas de VirtualDom et il est beaucoup plus performant que le reste de la concurrence !\n√Ä mon avis il s\u0026rsquo;imposera dans les 5 prochaines ann√©es.\n","permalink":"https://sowdowdow.github.io/one-click-hugo-cms/posts/2023-01-15-try-hard-django-partie-2-/","summary":"Partie 5 Au deuxi√®me jour de mon apprentissage je me suis concentr√© sur uniquement la partie 5 du tutoriel Django, pour cause ! Elle parle des Tests et observe donc un volume important.\nVoil√† ce que j\u0026rsquo;en retiens g√©n√©ralement :\nIl faut √©crire des tests, peut importe la quantit√© (mieux vaut trop que pas assez) Les d√©butants ne fonctionnent pas en TDD, mais il faut √©crire des tests quand m√™me Les tests c\u0026rsquo;est super pratique quand on est en √©quipe (pour ne pas casser le code du coll√®gue et vice-versa) Et d\u0026rsquo;un point de vue plus \u0026ldquo;tech\u0026rdquo; :","title":"Try Hard Django Partie 2 üêç"},{"content":"Je reprend donc l\u0026rsquo;apprentissage de Django en acc√©l√©r√©. J\u0026rsquo;ai pu revoir les 4 premi√®re partie du tutoriel du site officiel.\nVoici ce que j\u0026rsquo;ai pu revoir lors de ces 4 parties :\nPartie 1 La commande python manage.py runserver , les vues de base et le routing via le fichier urls.py .avec la fonction path() qui relie un url √† quelque-chose.\nPartie 2 La deuxi√®me partie s\u0026rsquo;ace autour de la d√©finition des mod√®les dans models.py, leur activation via le settings.py, la cr√©ation d\u0026rsquo;une migration, son dump en SQL brut et son application. On y joue √©galement un peu avec l\u0026rsquo;API django √† travers la commande python manage.py shell. Pour finir, cette partie introduit l\u0026rsquo;interface d\u0026rsquo;administration √† travers la cr√©ation du superuser et l\u0026rsquo;enregistrement des mod√®les.\nPartie 3 C\u0026rsquo;est ici l\u0026rsquo;introduction en douceur de la gestion pouss√© des vues : utilisation d\u0026rsquo;\u0026lsquo;argument en cl√© primaire, r√©daction de template, renvoie de context dans la m√©thode render(), gestion des 404, codage dynamique des urls via {% url 'app:nom' argument %} et pour finir les espaces de nom.\nPartie 4 La partie 4 se concentre sur l\u0026rsquo;√©criture d\u0026rsquo;un formulaire brut et son traitement, la gestion des erreurs via le try: except:, la redirection http, le raccourci get_object_or_404() et pour finir introduit les vues g√©n√©riques.\nJe ne me rappelle pas avoir utilis√© ces vues g√©n√©riques alors ce tutoriel vaut bien le coup !\n","permalink":"https://sowdowdow.github.io/one-click-hugo-cms/posts/2023-01-13-try-hard-django-partie-1-/","summary":"Je reprend donc l\u0026rsquo;apprentissage de Django en acc√©l√©r√©. J\u0026rsquo;ai pu revoir les 4 premi√®re partie du tutoriel du site officiel.\nVoici ce que j\u0026rsquo;ai pu revoir lors de ces 4 parties :\nPartie 1 La commande python manage.py runserver , les vues de base et le routing via le fichier urls.py .avec la fonction path() qui relie un url √† quelque-chose.\nPartie 2 La deuxi√®me partie s\u0026rsquo;ace autour de la d√©finition des mod√®les dans models.","title":"Try hard Django - partie 1 üêç"},{"content":"Aujourd\u0026rsquo;hui j\u0026rsquo;ai d√©couvert ChatGPT, un chatbot propuls√© par une IA ultra puissante √† qui on peut demander de g√©n√©rer du code dans n\u0026rsquo;importe quel langage !\nJe m\u0026rsquo;en suis alors servi pour √©crire un code dont je r√™ve depuis toujours : un script de backup vers onedrive.Ôªø Et oui, tant qu\u0026rsquo;√† payer un abonnement a 100 ‚Ç¨ par an pour un cloud, autant aussi y acc√©der aussi de mani√®re programmatique !\nCÔªøhatGPT m\u0026rsquo;a donc g√©n√©r√© le code suivant qu\u0026rsquo;il ne reste plus qu\u0026rsquo;√† adapter :\nimport shutil import os from onedrivesdk import Session def backup_file_to_onedrive(file_path, client_id, client_secret): # Create an authenticated session session = Session(client_id, client_secret) # Get the authenticated client client = session.get_client() # Get the root folder of the OneDrive root_folder = client.item(drive=\u0026#39;me\u0026#39;, id=\u0026#39;root\u0026#39;).children.get() # Get the current date and time current_time = time.strftime(\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;, time.gmtime()) # Get the backup file name backup_file_name = os.path.basename(file_path) + \u0026#39; \u0026#39; + current_time # Create a new file in the OneDrive root folder client.item(drive=\u0026#39;me\u0026#39;, id=\u0026#39;root\u0026#39;).children[backup_file_name].upload(file_path) print(f\u0026#39;File {file_path} has been backed up to OneDrive as {backup_file_name}.\u0026#39;) SÔªøur un autre sujet, je compte me remettre √† apprendre Django, et plus g√©n√©ralement me d√©rouiller dans le domaine du web. Cela va me permettre notamment de cr√©er une interface d\u0026rsquo;√©dition du blog en ligne, car actuellement il faut le cloner avec une cl√© SSH sur une machine pour pouvoir r√©diger des article\u0026hellip;\nDÔªøans la bataille aura probablement lieu une fusion ou un transfert des donn√©es de ce blog vers une app Django. Je ferais en sorte alors de cr√©er des backups automatis√©s via le script Python plus haut :)\nSÔªøide Note : J\u0026rsquo;ai appris que les webhooks tournent via l\u0026rsquo;√©mulateur de shell install√© par git sur windows\n","permalink":"https://sowdowdow.github.io/one-click-hugo-cms/posts/2023-01-13-chatgpt-onedrive-et-blog/","summary":"Aujourd\u0026rsquo;hui j\u0026rsquo;ai d√©couvert ChatGPT, un chatbot propuls√© par une IA ultra puissante √† qui on peut demander de g√©n√©rer du code dans n\u0026rsquo;importe quel langage !\nJe m\u0026rsquo;en suis alors servi pour √©crire un code dont je r√™ve depuis toujours : un script de backup vers onedrive.Ôªø Et oui, tant qu\u0026rsquo;√† payer un abonnement a 100 ‚Ç¨ par an pour un cloud, autant aussi y acc√©der aussi de mani√®re programmatique !","title":"ChatGPT, Onedrive et Blog"},{"content":"Cet article n\u0026rsquo;est ni le premier ni le dernier, j\u0026rsquo;ai fait √©voluer mon blog depuis le tout d√©but de mes √©tudes, j\u0026rsquo;ai perdu les contenus pr√©c√©dents dans la bataille. Je me pose donc comme objectif la mise en place de backup redondant sur plusieurs sites afin de ne plus commettre cette erreur.\nL\u0026rsquo;objectif premier de ce blog est d\u0026rsquo;ancrer les connaissances acquise √† travers une restitution textuelle, et si par le pass√© je ne l\u0026rsquo;ai pas maintenu c\u0026rsquo;est probablement parce que l\u0026rsquo;objectif d\u0026rsquo;√©crire tous les jours √©tait trop grand. Je me fixe donc comme nouvel objectif un minimum de deux articles par semaine.\nSÔªøtack Technique Pour reprendre rapidement et simplement l\u0026rsquo;usage de ce blog, j\u0026rsquo;emploi le g√©n√©rateur de sites statique Hugo, ainsi que le Content Manager Netlify CMS. PÔªøour la partie h√©bergement du site statique j\u0026rsquo;utilise Github Pages, car lui aussi simple √† mettre en place.\n","permalink":"https://sowdowdow.github.io/one-click-hugo-cms/posts/my-first-post/","summary":"Cet article n\u0026rsquo;est ni le premier ni le dernier, j\u0026rsquo;ai fait √©voluer mon blog depuis le tout d√©but de mes √©tudes, j\u0026rsquo;ai perdu les contenus pr√©c√©dents dans la bataille. Je me pose donc comme objectif la mise en place de backup redondant sur plusieurs sites afin de ne plus commettre cette erreur.\nL\u0026rsquo;objectif premier de ce blog est d\u0026rsquo;ancrer les connaissances acquise √† travers une restitution textuelle, et si par le pass√© je ne l\u0026rsquo;ai pas maintenu c\u0026rsquo;est probablement parce que l\u0026rsquo;objectif d\u0026rsquo;√©crire tous les jours √©tait trop grand.","title":"Hello World n¬∞36997, le blog reprend"},{"content":"L\u0026rsquo;objectif de ce blog est de retranscrire texutellement mes connaissances et experiences afin de mieux les m√©moriser.\n","permalink":"https://sowdowdow.github.io/one-click-hugo-cms/about/about/","summary":"L\u0026rsquo;objectif de ce blog est de retranscrire texutellement mes connaissances et experiences afin de mieux les m√©moriser.","title":"√Ä propos de ce blog"}]